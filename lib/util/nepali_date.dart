const Map<int, List<int>> monthLength = {
  2000: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  2001: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2002: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2003: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2004: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  2005: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2006: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2007: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2008: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
  2009: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2010: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2011: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2012: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
  2013: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2014: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2015: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2016: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
  2017: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2018: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2019: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  2020: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
  2021: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2022: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
  2023: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  2024: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
  2025: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2026: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2027: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  2028: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2029: [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
  2030: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2031: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  2032: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2033: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2034: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2035: [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
  2036: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2037: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2038: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2039: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
  2040: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2041: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2042: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2043: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
  2044: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2045: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2046: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2047: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
  2048: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2049: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
  2050: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  2051: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
  2052: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2053: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
  2054: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  2055: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2056: [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
  2057: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2058: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  2059: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2060: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2061: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2062: [30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],
  2063: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2064: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2065: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2066: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
  2067: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2068: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2069: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2070: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
  2071: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2072: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2073: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2074: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
  2075: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2076: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
  2077: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  2078: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
  2079: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2080: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
  2081: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  2082: [31, 31, 32, 31, 31, 31, 29, 29, 30, 29, 30, 30],
  2083: [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
  2084: [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
  2085: [31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30],
  2086: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
  2087: [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],
  2088: [30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],
  2089: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
  2090: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
};

Map<int, DateTime> firstDay = {
  2000: DateTime(1943, 4, 13),
  2001: DateTime(1944, 4, 13),
  2002: DateTime(1945, 4, 13),
  2003: DateTime(1946, 4, 13),
  2004: DateTime(1947, 4, 14),
  2005: DateTime(1948, 4, 13),
  2006: DateTime(1949, 4, 13),
  2007: DateTime(1950, 4, 13),
  2008: DateTime(1951, 4, 14),
  2009: DateTime(1952, 4, 13),
  2010: DateTime(1953, 4, 13),
  2011: DateTime(1954, 4, 13),
  2012: DateTime(1955, 4, 14),
  2013: DateTime(1956, 4, 13),
  2014: DateTime(1957, 4, 13),
  2015: DateTime(1958, 4, 13),
  2016: DateTime(1959, 4, 14),
  2017: DateTime(1960, 4, 13),
  2018: DateTime(1961, 4, 13),
  2019: DateTime(1962, 4, 13),
  2020: DateTime(1963, 4, 14),
  2021: DateTime(1964, 4, 13),
  2022: DateTime(1965, 4, 13),
  2023: DateTime(1966, 4, 13),
  2024: DateTime(1967, 4, 14),
  2025: DateTime(1968, 4, 13),
  2026: DateTime(1969, 4, 13),
  2027: DateTime(1970, 4, 14),
  2028: DateTime(1971, 4, 14),
  2029: DateTime(1972, 4, 13),
  2030: DateTime(1973, 4, 13),
  2031: DateTime(1974, 4, 14),
  2032: DateTime(1975, 4, 14),
  2033: DateTime(1976, 4, 13),
  2034: DateTime(1977, 4, 13),
  2035: DateTime(1978, 4, 14),
  2036: DateTime(1979, 4, 14),
  2037: DateTime(1980, 4, 13),
  2038: DateTime(1981, 4, 13),
  2039: DateTime(1982, 4, 14),
  2040: DateTime(1983, 4, 14),
  2041: DateTime(1984, 4, 13),
  2042: DateTime(1985, 4, 13),
  2043: DateTime(1986, 4, 14),
  2044: DateTime(1987, 4, 14),
  2045: DateTime(1988, 4, 13),
  2046: DateTime(1989, 4, 13),
  2047: DateTime(1990, 4, 14),
  2048: DateTime(1991, 4, 14),
  2049: DateTime(1992, 4, 13),
  2050: DateTime(1993, 4, 13),
  2051: DateTime(1994, 4, 14),
  2052: DateTime(1995, 4, 14),
  2053: DateTime(1996, 4, 13),
  2054: DateTime(1997, 4, 13),
  2055: DateTime(1998, 4, 14),
  2056: DateTime(1999, 4, 14),
  2057: DateTime(2000, 4, 13),
  2058: DateTime(2001, 4, 14),
  2059: DateTime(2002, 4, 14),
  2060: DateTime(2003, 4, 14),
  2061: DateTime(2004, 4, 13),
  2062: DateTime(2005, 4, 14),
  2063: DateTime(2006, 4, 14),
  2064: DateTime(2007, 4, 14),
  2065: DateTime(2008, 4, 13),
  2066: DateTime(2009, 4, 14),
  2067: DateTime(2010, 4, 14),
  2068: DateTime(2011, 4, 14),
  2069: DateTime(2012, 4, 13),
  2070: DateTime(2013, 4, 14),
  2071: DateTime(2014, 4, 14),
  2072: DateTime(2015, 4, 14),
  2073: DateTime(2016, 4, 13),
  2074: DateTime(2017, 4, 14),
  2075: DateTime(2018, 4, 14),
  2076: DateTime(2019, 4, 14),
  2077: DateTime(2020, 4, 13),
  2078: DateTime(2021, 4, 14),
  2079: DateTime(2022, 4, 14),
  2080: DateTime(2023, 4, 14),
  2081: DateTime(2024, 4, 13),
  2082: DateTime(2025, 4, 14),
  2083: DateTime(2026, 4, 14),
  2084: DateTime(2027, 4, 14),
  2085: DateTime(2028, 4, 13),
  2086: DateTime(2029, 4, 14),
  2087: DateTime(2030, 4, 14),
  2088: DateTime(2031, 4, 15),
  2089: DateTime(2032, 4, 14),
  2090: DateTime(2033, 4, 14),
};

const List<String> monthName = [
  "Baisakh",
  "Jestha",
  "Asaar",
  "Shrawan",
  "Bhadra",
  "Ashoj",
  "Kartik",
  "Mangsir",
  "Poush",
  "Magh",
  "Falgun",
  "Chaitra",
];

enum DayOfWeek {
  monday,
  tuesday,
  wednesday,
  thursday,
  friday,
  saturday,
  sunday,
}

class NepaliDate {
  late int year;
  late int month;
  late int day;
  late DayOfWeek dayOfWeek;

  NepaliDate(this.year, this.month, this.day, this.dayOfWeek);

  NepaliDate.fromGregorian(DateTime gregorian) {
    var date = _fromGregorian(gregorian);

    year = date.$1;
    month = date.$2;
    day = date.$3;
    dayOfWeek = DayOfWeek.values[gregorian.weekday - 1];
  }

  DayOfWeek offsetWeekday(DayOfWeek weekday, int offset) {
    return DayOfWeek.values[(weekday.index + offset) % 7];
  }

  (int, int, int) _fromGregorian(DateTime gregorian) {
    var year = gregorian.year;
    int nepYear;

    if (year > 2033) {
      throw UnimplementedError(
          "This app doesn't support Gregorian years over 2033.");
    }

    // Ensure that `gregorian` is NEVER more than 2090 - 57
    if (gregorian.isBefore(firstDay[gregorian.year + 57]!)) {
      nepYear = year + 56;
    } else {
      nepYear = year + 57;
    }

    int nepMonth = 0;
    int nepDay = 0;

    var firstDayOfNepYear = firstDay[nepYear]!;

    int gregorianDayGap = (gregorian.difference(firstDayOfNepYear)).inDays;
    if (gregorianDayGap < 0) {
      throw Exception("You done goofed up");
    }

    int i = 0;
    for (var days in monthLength[nepYear]!) {
      if (gregorianDayGap < days) {
        nepMonth = i + 1;
        nepDay = gregorianDayGap + 1;
        break;
      }

      gregorianDayGap -= days;
      i++;
    }

    return (nepYear, nepMonth, nepDay);
  }

  @override
  String toString() {
    var monthStr = month <= 12 ? monthName[month - 1] : month;

    return "$monthStr $day, $year";
  }
}
